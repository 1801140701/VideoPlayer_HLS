{"version":3,"file":"993.bundle.js","mappings":"iRAWIA,EAAU,CAAC,EAEfA,EAAQC,kBAAoB,IAC5BD,EAAQE,cAAgB,IACxBF,EAAQG,OAAS,SAAc,KAAM,QACrCH,EAAQI,OAAS,IACjBJ,EAAQK,mBAAqB,IAEhB,IAAI,IAASL,GAKJ,KAAW,IAAQM,QAAS,IAAQA,OAAnD,MC6FP,EAjHoBC,KAClB,MAAMC,GAAWC,EAAAA,EAAAA,QAAO,OACjBC,EAAgBC,IAAqBC,EAAAA,EAAAA,UAAS,OAC9CC,EAAaC,IAAkBF,EAAAA,EAAAA,UAAS,KACxCG,EAAmBC,IAAwBJ,EAAAA,EAAAA,UAAS,IACpDK,EAAkBC,IAAuBN,EAAAA,EAAAA,WAAS,IAClDO,EAAWC,IAAgBR,EAAAA,EAAAA,WAAS,GAwE3C,OAtEAS,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAQd,EAASe,QAEvB,GAAIC,EAAAA,GAAAA,cAAmB,CACrB,MAAMC,EAAS,IAAID,EAAAA,GACnBC,EAAOC,WACL,uFAEFD,EAAOE,YAAYL,GAEnBG,EAAOG,GAAGJ,EAAAA,GAAAA,OAAWK,iBAAiB,KACpCJ,EAAOK,iBAAkB,EACzBZ,GAAoB,EAAM,IAG5BO,EAAOG,GAAGJ,EAAAA,GAAAA,OAAWO,sBAAsB,CAACC,EAAOC,KACjDnB,EAAemB,EAAKpB,YAAY,IAGlCY,EAAOG,GAAGJ,EAAAA,GAAAA,OAAWU,yBAAyB,CAACF,EAAOC,KACpDE,QAAQC,IAAI,2BAA4BH,EAAKI,eAAe,IAG9D1B,EAAkBc,EACpB,MAAWH,EAAMgB,YAAY,mCAC3BhB,EAAMiB,IACJ,uFAGJ,MAAO,KACD7B,GACFA,EAAe8B,SACjB,CACD,GACA,IAqCDC,EAAAA,cAAA,OAAKC,UAAU,WACbD,EAAAA,cAAA,UAAI,gBACJA,EAAAA,cAAA,SACEE,IAAKnC,EACLoC,UAAQ,EACRC,MAAO,CAAEC,MAAO,OAAQC,SAAU,WAEpCN,EAAAA,cAAA,WACItB,EASAsB,EAAAA,cAAA,UAAQO,QAvBSC,KACvBzC,EAASe,QAAQ2B,QACjB9B,GAAa,EAAM,EAqBsBsB,UAAU,0BAAyB,SARtED,EAAAA,cAAA,UACEU,WAAS,EACTH,QA5BcI,KACtB5C,EAASe,QACN8B,OACAC,MAAK,KACJlC,GAAa,EAAK,IAEnBmC,OAAOC,IACNrB,QAAQC,IAAI,uBAAwBoB,EAAM,GAC1C,EAqBId,UAAU,0BACX,QAQHD,EAAAA,cAAA,UAAQO,QAxDWS,KACvB,GAAI5C,EAAY6C,OAAS,EAAG,CAC1B,MAAMC,GAAa5C,EAAoB,GAAKF,EAAY6C,OACxDhD,EAAekD,WAAaD,EAC5B3C,EAAqB2C,EACvB,GAmDuCjB,UAAU,0BAC1C7B,GAAa6C,OAAS,EACnB,UAAU7C,EAAYE,GAAmB8C,OACzC,SAENpB,EAAAA,cAAA,UAAQO,QArDUc,KACtB,MAAMC,GAAuB9C,EACzBP,IACFA,EAAeoB,gBAAkBiC,EACjC7C,EAAoB6C,IAEtB7C,GAAqBD,GACrBP,EAAeoB,iBAAmBb,CAAgB,EA8CZyB,UAAU,0BACzCzB,EAAmB,oBAAsB,qBAG1C,C,gEC9GN+C,E,MAA0B,GAA4B,KAE1DA,EAAwBC,KAAK,CAACC,EAAOC,GAAI,ggBA2BpC,GAAG,CAAC,QAAU,EAAE,QAAU,CAAC,8CAA8C,MAAQ,GAAG,SAAW,2OAA2O,eAAiB,CAAC,ujBAAujB,WAAa,MAEr6B,S","sources":["webpack://video-player/./src/components/videoPlayer.css?d7dc","webpack://video-player/./src/components/VideoPlayer.js","webpack://video-player/./src/components/videoPlayer.css"],"sourcesContent":["\n      import API from \"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../node_modules/css-loader/dist/cjs.js!./videoPlayer.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\noptions.insert = insertFn.bind(null, \"head\");\noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../node_modules/css-loader/dist/cjs.js!./videoPlayer.css\";\n       export default content && content.locals ? content.locals : undefined;\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport Hls from \"hls.js\";\r\nimport './videoPlayer.css';\r\n\r\nconst VideoPlayer = () => {\r\n  const videoRef = useRef(null);\r\n  const [playerInstance, setPlayerInstance] = useState(null);\r\n  const [audioTracks, setAudioTracks] = useState([]);\r\n  const [currentAudioTrack, setCurrentAudioTrack] = useState(0);\r\n  const [subtitlesEnabled, setSubtitlesEnabled] = useState(false);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const video = videoRef.current;\r\n\r\n    if (Hls.isSupported()) {\r\n      const player = new Hls();\r\n      player.loadSource(\r\n        \"http://localhost:8085/https://media.kableone.com/Previews/SubedarScene1/index3.m3u8\"\r\n      );\r\n      player.attachMedia(video);\r\n\r\n      player.on(Hls.Events.MANIFEST_PARSED, () => {\r\n        player.subtitleDisplay = false;\r\n        setSubtitlesEnabled(false);\r\n      });\r\n\r\n      player.on(Hls.Events.AUDIO_TRACKS_UPDATED, (event, data) => {\r\n        setAudioTracks(data.audioTracks);\r\n      });\r\n\r\n      player.on(Hls.Events.SUBTITLE_TRACKS_UPDATED, (event, data) => {\r\n        console.log(\"Subtitle tracks updated:\", data.subtitleTracks);\r\n      });\r\n\r\n      setPlayerInstance(player);\r\n    } else if (video.canPlayType(\"application/vnd.apple.mpegurl\")) {\r\n      video.src =\r\n        \"http://localhost:8085/https://media.kableone.com/Previews/SubedarScene1/index3.m3u8\";\r\n    }\r\n\r\n    return () => {\r\n      if (playerInstance) {\r\n        playerInstance.destroy();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const changeAudioTrack = () => {\r\n    if (audioTracks.length > 1) {\r\n      const nextTrack = (currentAudioTrack + 1) % audioTracks.length;\r\n      playerInstance.audioTrack = nextTrack;\r\n      setCurrentAudioTrack(nextTrack);\r\n    }\r\n  };\r\n\r\n  const toggleSubtitles = () => {\r\n    const newSubtitlesEnabled = !subtitlesEnabled;\r\n    if (playerInstance) {\r\n      playerInstance.subtitleDisplay = newSubtitlesEnabled;\r\n      setSubtitlesEnabled(newSubtitlesEnabled);\r\n    }\r\n    setSubtitlesEnabled(!subtitlesEnabled);\r\n    playerInstance.subtitleDisplay = !subtitlesEnabled;\r\n  };\r\n\r\n  const handlePlayClick = () => {\r\n    videoRef.current\r\n      .play()\r\n      .then(() => {\r\n        setIsPlaying(true);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error playing video:\", error);\r\n      });\r\n  };\r\n\r\n  const handlePauseClick = () => {\r\n    videoRef.current.pause();\r\n    setIsPlaying(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <h1>Video Player</h1>\r\n      <video\r\n        ref={videoRef}\r\n        controls\r\n        style={{ width: \"100%\", maxWidth: \"800px\" }}\r\n      ></video>\r\n      <div>\r\n        {!isPlaying ? (\r\n          <button\r\n            autoFocus\r\n            onClick={handlePlayClick}\r\n            className=\"button-audio focusable\"\r\n          >\r\n            Play\r\n          </button>\r\n        ) : (\r\n          <button onClick={handlePauseClick} className=\"button-audio focusable\">\r\n            Pause\r\n          </button>\r\n        )}\r\n        <button onClick={changeAudioTrack} className=\"button-audio focusable\">\r\n          {audioTracks?.length > 0\r\n            ? `Audio: ${audioTracks[currentAudioTrack].name}`\r\n            : \"Audio\"}\r\n        </button>\r\n        <button onClick={toggleSubtitles} className=\"button-audio focusable\">\r\n          {subtitlesEnabled ? \"Disable Subtitles\" : \"Enable Subtitles\"}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VideoPlayer;","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `video {\r\n    width: 100%;\r\n    max-width: 1920px;\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  .button-audio {\r\n    background-color: #61dafb;\r\n    border: none;\r\n    color: black;\r\n    padding: 10px 20px;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 16px;\r\n    margin: 4px 2px;\r\n    cursor: pointer;\r\n    border-radius: 4px;\r\n  }\r\n  \r\n  .button-audio:focus {\r\n    border: 4px solid black;\r\n  }\r\n  \r\n  .button-audio:hover {\r\n    background-color: #21a1f1;\r\n  }\r\n  `, \"\",{\"version\":3,\"sources\":[\"webpack://./src/components/videoPlayer.css\"],\"names\":[],\"mappings\":\"AAAA;IACI,WAAW;IACX,iBAAiB;IACjB,mBAAmB;EACrB;;EAEA;IACE,yBAAyB;IACzB,YAAY;IACZ,YAAY;IACZ,kBAAkB;IAClB,kBAAkB;IAClB,qBAAqB;IACrB,qBAAqB;IACrB,eAAe;IACf,eAAe;IACf,eAAe;IACf,kBAAkB;EACpB;;EAEA;IACE,uBAAuB;EACzB;;EAEA;IACE,yBAAyB;EAC3B\",\"sourcesContent\":[\"video {\\r\\n    width: 100%;\\r\\n    max-width: 1920px;\\r\\n    margin-bottom: 20px;\\r\\n  }\\r\\n  \\r\\n  .button-audio {\\r\\n    background-color: #61dafb;\\r\\n    border: none;\\r\\n    color: black;\\r\\n    padding: 10px 20px;\\r\\n    text-align: center;\\r\\n    text-decoration: none;\\r\\n    display: inline-block;\\r\\n    font-size: 16px;\\r\\n    margin: 4px 2px;\\r\\n    cursor: pointer;\\r\\n    border-radius: 4px;\\r\\n  }\\r\\n  \\r\\n  .button-audio:focus {\\r\\n    border: 4px solid black;\\r\\n  }\\r\\n  \\r\\n  .button-audio:hover {\\r\\n    background-color: #21a1f1;\\r\\n  }\\r\\n  \"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n"],"names":["options","styleTagTransform","setAttributes","insert","domAPI","insertStyleElement","locals","VideoPlayer","videoRef","useRef","playerInstance","setPlayerInstance","useState","audioTracks","setAudioTracks","currentAudioTrack","setCurrentAudioTrack","subtitlesEnabled","setSubtitlesEnabled","isPlaying","setIsPlaying","useEffect","video","current","Hls","player","loadSource","attachMedia","on","MANIFEST_PARSED","subtitleDisplay","AUDIO_TRACKS_UPDATED","event","data","SUBTITLE_TRACKS_UPDATED","console","log","subtitleTracks","canPlayType","src","destroy","React","className","ref","controls","style","width","maxWidth","onClick","handlePauseClick","pause","autoFocus","handlePlayClick","play","then","catch","error","changeAudioTrack","length","nextTrack","audioTrack","name","toggleSubtitles","newSubtitlesEnabled","___CSS_LOADER_EXPORT___","push","module","id"],"sourceRoot":""}